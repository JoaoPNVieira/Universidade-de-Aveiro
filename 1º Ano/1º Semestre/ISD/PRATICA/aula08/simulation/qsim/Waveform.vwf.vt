// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/02/2021 10:56:42"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          AddSubDemo
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module AddSubDemo_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Input0;
reg Input1;
reg Input2;
reg Input3;
reg Input4;
reg Input5;
reg Input6;
reg Input7;
reg Sub;
// wires                                               
wire Overflow;
wire Sum1;
wire Sum2;
wire Sum3;
wire Sum4;

// assign statements (if any)                          
AddSubDemo i1 (
// port map - connection between master ports and signals/registers   
	.Input0(Input0),
	.Input1(Input1),
	.Input2(Input2),
	.Input3(Input3),
	.Input4(Input4),
	.Input5(Input5),
	.Input6(Input6),
	.Input7(Input7),
	.Overflow(Overflow),
	.Sub(Sub),
	.Sum1(Sum1),
	.Sum2(Sum2),
	.Sum3(Sum3),
	.Sum4(Sum4)
);
initial 
begin 
#1000000 $finish;
end 

// Input0
initial
begin
	Input0 = 1'b0;
	Input0 = #20000 1'b1;
	Input0 = #160000 1'b0;
	Input0 = #130000 1'b1;
	Input0 = #40000 1'b0;
end 

// Input1
initial
begin
	Input1 = 1'b0;
	Input1 = #40000 1'b1;
	Input1 = #140000 1'b0;
	Input1 = #110000 1'b1;
	Input1 = #40000 1'b0;
	Input1 = #20000 1'b1;
	Input1 = #20000 1'b0;
end 

// Input2
initial
begin
	Input2 = 1'b0;
	Input2 = #60000 1'b1;
	Input2 = #120000 1'b0;
	Input2 = #90000 1'b1;
	Input2 = #60000 1'b0;
	Input2 = #40000 1'b1;
	Input2 = #20000 1'b0;
end 

// Input3
initial
begin
	Input3 = 1'b0;
	Input3 = #80000 1'b1;
	Input3 = #100000 1'b0;
	Input3 = #70000 1'b1;
	Input3 = #80000 1'b0;
	Input3 = #60000 1'b1;
	Input3 = #20000 1'b0;
end 

// Input4
initial
begin
	Input4 = 1'b0;
	Input4 = #100000 1'b1;
	Input4 = #80000 1'b0;
	Input4 = #50000 1'b1;
	Input4 = #100000 1'b0;
	Input4 = #80000 1'b1;
	Input4 = #20000 1'b0;
end 

// Input5
initial
begin
	Input5 = 1'b0;
	Input5 = #120000 1'b1;
	Input5 = #60000 1'b0;
	Input5 = #30000 1'b1;
	Input5 = #120000 1'b0;
	Input5 = #100000 1'b1;
	Input5 = #20000 1'b0;
end 

// Input6
initial
begin
	Input6 = 1'b0;
	Input6 = #140000 1'b1;
	Input6 = #40000 1'b0;
	Input6 = #20000 1'b1;
	Input6 = #130000 1'b0;
	Input6 = #120000 1'b1;
	Input6 = #20000 1'b0;
end 

// Input7
initial
begin
	Input7 = 1'b0;
	Input7 = #160000 1'b1;
	Input7 = #170000 1'b0;
	Input7 = #140000 1'b1;
	Input7 = #20000 1'b0;
end 

// Sub
initial
begin
	Sub = 1'b0;
end 
endmodule

