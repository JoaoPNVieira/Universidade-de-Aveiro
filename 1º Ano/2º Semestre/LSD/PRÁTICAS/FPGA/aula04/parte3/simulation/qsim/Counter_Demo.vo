// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 20.1.0 Build 711 06/05/2020 SJ Lite Edition"

// DATE "04/08/2022 11:27:26"

// 
// Device: Altera EP4CE115F29C7 Package FBGA780
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module CounterUpDown4 (
	clk,
	reset,
	upDown,
	count);
input 	clk;
input 	reset;
input 	upDown;
output 	[3:0] count;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \count[0]~output_o ;
wire \count[1]~output_o ;
wire \count[2]~output_o ;
wire \count[3]~output_o ;
wire \clk~input_o ;
wire \s_count[0]~11_combout ;
wire \reset~input_o ;
wire \upDown~input_o ;
wire \s_count[1]~4_cout ;
wire \s_count[1]~5_combout ;
wire \s_count[1]~6 ;
wire \s_count[2]~7_combout ;
wire \s_count[2]~8 ;
wire \s_count[3]~9_combout ;
wire [3:0] s_count;


cycloneive_io_obuf \count[0]~output (
	.i(s_count[0]),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\count[0]~output_o ),
	.obar());
// synopsys translate_off
defparam \count[0]~output .bus_hold = "false";
defparam \count[0]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \count[1]~output (
	.i(s_count[1]),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\count[1]~output_o ),
	.obar());
// synopsys translate_off
defparam \count[1]~output .bus_hold = "false";
defparam \count[1]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \count[2]~output (
	.i(s_count[2]),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\count[2]~output_o ),
	.obar());
// synopsys translate_off
defparam \count[2]~output .bus_hold = "false";
defparam \count[2]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \count[3]~output (
	.i(s_count[3]),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\count[3]~output_o ),
	.obar());
// synopsys translate_off
defparam \count[3]~output .bus_hold = "false";
defparam \count[3]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_ibuf \clk~input (
	.i(clk),
	.ibar(gnd),
	.o(\clk~input_o ));
// synopsys translate_off
defparam \clk~input .bus_hold = "false";
defparam \clk~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \s_count[0]~11 (
// Equation(s):
// \s_count[0]~11_combout  = !s_count[0]

	.dataa(s_count[0]),
	.datab(gnd),
	.datac(gnd),
	.datad(gnd),
	.cin(gnd),
	.combout(\s_count[0]~11_combout ),
	.cout());
// synopsys translate_off
defparam \s_count[0]~11 .lut_mask = 16'h5555;
defparam \s_count[0]~11 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_io_ibuf \reset~input (
	.i(reset),
	.ibar(gnd),
	.o(\reset~input_o ));
// synopsys translate_off
defparam \reset~input .bus_hold = "false";
defparam \reset~input .simulate_z_as = "z";
// synopsys translate_on

dffeas \s_count[0] (
	.clk(\clk~input_o ),
	.d(\s_count[0]~11_combout ),
	.asdata(vcc),
	.clrn(!\reset~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(s_count[0]),
	.prn(vcc));
// synopsys translate_off
defparam \s_count[0] .is_wysiwyg = "true";
defparam \s_count[0] .power_up = "low";
// synopsys translate_on

cycloneive_io_ibuf \upDown~input (
	.i(upDown),
	.ibar(gnd),
	.o(\upDown~input_o ));
// synopsys translate_off
defparam \upDown~input .bus_hold = "false";
defparam \upDown~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \s_count[1]~4 (
// Equation(s):
// \s_count[1]~4_cout  = CARRY(s_count[0])

	.dataa(s_count[0]),
	.datab(gnd),
	.datac(gnd),
	.datad(vcc),
	.cin(gnd),
	.combout(),
	.cout(\s_count[1]~4_cout ));
// synopsys translate_off
defparam \s_count[1]~4 .lut_mask = 16'h00AA;
defparam \s_count[1]~4 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb \s_count[1]~5 (
// Equation(s):
// \s_count[1]~5_combout  = (\upDown~input_o  & ((s_count[1] & (!\s_count[1]~4_cout )) # (!s_count[1] & ((\s_count[1]~4_cout ) # (GND))))) # (!\upDown~input_o  & ((s_count[1] & (\s_count[1]~4_cout  & VCC)) # (!s_count[1] & (!\s_count[1]~4_cout ))))
// \s_count[1]~6  = CARRY((\upDown~input_o  & ((!\s_count[1]~4_cout ) # (!s_count[1]))) # (!\upDown~input_o  & (!s_count[1] & !\s_count[1]~4_cout )))

	.dataa(\upDown~input_o ),
	.datab(s_count[1]),
	.datac(gnd),
	.datad(vcc),
	.cin(\s_count[1]~4_cout ),
	.combout(\s_count[1]~5_combout ),
	.cout(\s_count[1]~6 ));
// synopsys translate_off
defparam \s_count[1]~5 .lut_mask = 16'h692B;
defparam \s_count[1]~5 .sum_lutc_input = "cin";
// synopsys translate_on

dffeas \s_count[1] (
	.clk(\clk~input_o ),
	.d(\s_count[1]~5_combout ),
	.asdata(vcc),
	.clrn(!\reset~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(s_count[1]),
	.prn(vcc));
// synopsys translate_off
defparam \s_count[1] .is_wysiwyg = "true";
defparam \s_count[1] .power_up = "low";
// synopsys translate_on

cycloneive_lcell_comb \s_count[2]~7 (
// Equation(s):
// \s_count[2]~7_combout  = ((\upDown~input_o  $ (s_count[2] $ (\s_count[1]~6 )))) # (GND)
// \s_count[2]~8  = CARRY((\upDown~input_o  & (s_count[2] & !\s_count[1]~6 )) # (!\upDown~input_o  & ((s_count[2]) # (!\s_count[1]~6 ))))

	.dataa(\upDown~input_o ),
	.datab(s_count[2]),
	.datac(gnd),
	.datad(vcc),
	.cin(\s_count[1]~6 ),
	.combout(\s_count[2]~7_combout ),
	.cout(\s_count[2]~8 ));
// synopsys translate_off
defparam \s_count[2]~7 .lut_mask = 16'h964D;
defparam \s_count[2]~7 .sum_lutc_input = "cin";
// synopsys translate_on

dffeas \s_count[2] (
	.clk(\clk~input_o ),
	.d(\s_count[2]~7_combout ),
	.asdata(vcc),
	.clrn(!\reset~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(s_count[2]),
	.prn(vcc));
// synopsys translate_off
defparam \s_count[2] .is_wysiwyg = "true";
defparam \s_count[2] .power_up = "low";
// synopsys translate_on

cycloneive_lcell_comb \s_count[3]~9 (
// Equation(s):
// \s_count[3]~9_combout  = \upDown~input_o  $ (s_count[3] $ (!\s_count[2]~8 ))

	.dataa(\upDown~input_o ),
	.datab(s_count[3]),
	.datac(gnd),
	.datad(gnd),
	.cin(\s_count[2]~8 ),
	.combout(\s_count[3]~9_combout ),
	.cout());
// synopsys translate_off
defparam \s_count[3]~9 .lut_mask = 16'h6969;
defparam \s_count[3]~9 .sum_lutc_input = "cin";
// synopsys translate_on

dffeas \s_count[3] (
	.clk(\clk~input_o ),
	.d(\s_count[3]~9_combout ),
	.asdata(vcc),
	.clrn(!\reset~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(s_count[3]),
	.prn(vcc));
// synopsys translate_off
defparam \s_count[3] .is_wysiwyg = "true";
defparam \s_count[3] .power_up = "low";
// synopsys translate_on

assign count[0] = \count[0]~output_o ;

assign count[1] = \count[1]~output_o ;

assign count[2] = \count[2]~output_o ;

assign count[3] = \count[3]~output_o ;

endmodule
