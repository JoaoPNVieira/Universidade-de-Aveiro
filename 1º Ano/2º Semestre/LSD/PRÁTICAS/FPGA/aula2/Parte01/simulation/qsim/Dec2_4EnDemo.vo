// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 20.1.0 Build 711 06/05/2020 SJ Lite Edition"

// DATE "05/10/2022 22:17:16"

// 
// Device: Altera EP4CE115F29C7 Package FBGA780
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module Dec2_4En (
	enable,
	inputs,
	outputs);
input 	enable;
input 	[1:0] inputs;
output 	[3:0] outputs;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \outputs[0]~output_o ;
wire \outputs[1]~output_o ;
wire \outputs[2]~output_o ;
wire \outputs[3]~output_o ;
wire \enable~input_o ;
wire \inputs[1]~input_o ;
wire \inputs[0]~input_o ;
wire \outputs~0_combout ;
wire \outputs~1_combout ;
wire \outputs~2_combout ;
wire \outputs~3_combout ;


cycloneive_io_obuf \outputs[0]~output (
	.i(\outputs~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\outputs[0]~output_o ),
	.obar());
// synopsys translate_off
defparam \outputs[0]~output .bus_hold = "false";
defparam \outputs[0]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \outputs[1]~output (
	.i(\outputs~1_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\outputs[1]~output_o ),
	.obar());
// synopsys translate_off
defparam \outputs[1]~output .bus_hold = "false";
defparam \outputs[1]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \outputs[2]~output (
	.i(\outputs~2_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\outputs[2]~output_o ),
	.obar());
// synopsys translate_off
defparam \outputs[2]~output .bus_hold = "false";
defparam \outputs[2]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \outputs[3]~output (
	.i(\outputs~3_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\outputs[3]~output_o ),
	.obar());
// synopsys translate_off
defparam \outputs[3]~output .bus_hold = "false";
defparam \outputs[3]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_ibuf \enable~input (
	.i(enable),
	.ibar(gnd),
	.o(\enable~input_o ));
// synopsys translate_off
defparam \enable~input .bus_hold = "false";
defparam \enable~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \inputs[1]~input (
	.i(inputs[1]),
	.ibar(gnd),
	.o(\inputs[1]~input_o ));
// synopsys translate_off
defparam \inputs[1]~input .bus_hold = "false";
defparam \inputs[1]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \inputs[0]~input (
	.i(inputs[0]),
	.ibar(gnd),
	.o(\inputs[0]~input_o ));
// synopsys translate_off
defparam \inputs[0]~input .bus_hold = "false";
defparam \inputs[0]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \outputs~0 (
// Equation(s):
// \outputs~0_combout  = (\enable~input_o  & (!\inputs[1]~input_o  & !\inputs[0]~input_o ))

	.dataa(\enable~input_o ),
	.datab(gnd),
	.datac(\inputs[1]~input_o ),
	.datad(\inputs[0]~input_o ),
	.cin(gnd),
	.combout(\outputs~0_combout ),
	.cout());
// synopsys translate_off
defparam \outputs~0 .lut_mask = 16'h000A;
defparam \outputs~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb \outputs~1 (
// Equation(s):
// \outputs~1_combout  = (\enable~input_o  & (\inputs[0]~input_o  & !\inputs[1]~input_o ))

	.dataa(\enable~input_o ),
	.datab(\inputs[0]~input_o ),
	.datac(gnd),
	.datad(\inputs[1]~input_o ),
	.cin(gnd),
	.combout(\outputs~1_combout ),
	.cout());
// synopsys translate_off
defparam \outputs~1 .lut_mask = 16'h0088;
defparam \outputs~1 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb \outputs~2 (
// Equation(s):
// \outputs~2_combout  = (\inputs[1]~input_o  & (\enable~input_o  & !\inputs[0]~input_o ))

	.dataa(\inputs[1]~input_o ),
	.datab(\enable~input_o ),
	.datac(gnd),
	.datad(\inputs[0]~input_o ),
	.cin(gnd),
	.combout(\outputs~2_combout ),
	.cout());
// synopsys translate_off
defparam \outputs~2 .lut_mask = 16'h0088;
defparam \outputs~2 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb \outputs~3 (
// Equation(s):
// \outputs~3_combout  = (\inputs[1]~input_o  & (\enable~input_o  & \inputs[0]~input_o ))

	.dataa(\inputs[1]~input_o ),
	.datab(\enable~input_o ),
	.datac(\inputs[0]~input_o ),
	.datad(gnd),
	.cin(gnd),
	.combout(\outputs~3_combout ),
	.cout());
// synopsys translate_off
defparam \outputs~3 .lut_mask = 16'h8080;
defparam \outputs~3 .sum_lutc_input = "datac";
// synopsys translate_on

assign outputs[0] = \outputs[0]~output_o ;

assign outputs[1] = \outputs[1]~output_o ;

assign outputs[2] = \outputs[2]~output_o ;

assign outputs[3] = \outputs[3]~output_o ;

endmodule
